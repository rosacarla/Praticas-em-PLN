# -*- coding: utf-8 -*-
"""S3-Similaridade-Semantica.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18pS93BTEN6oqVkvC53vxBzXhPz2G2ft8

># <b>Similaridade Semântica</b>  
>Instituição: PUCPR  
>Curso: Tecnologia em Inteligência Artifical Aplicada  
>Disciplina: Processamento de Linguagem Natural  
>Professor: Lucas Oliveira   
>Estudante: Carla Edila Silveira  
> Data: 14/04/2024  

> <img src='https://i.postimg.cc/cH67xS70/similaridade-semantica-pln.jpg'>  
> Crédito da imagem: gerada com IA Copilot</i>  
</br>

---  
</br>  

## Processamento de Linguagem Natural
A Similaridade semântica é medida através da semelhança de  <b>significado</b> ou <b>conteúdo semântico</b> entre palavras/sentenças/documentos.

<p align='justify'>Nesta aula você realizará atividades práticas relacionadas a <b>Similaridade semântica</b>, visando entender qual o seu papel nas mais diversas aplicações de PLN, além de utilizar a interface WordNet do NLTK para língua inglesa.</p>

<p align='justify'><b>WordNet</b> é a rede semântica mais popular na área de medir a similaridade <i>knowledge-based</i>. O WordNet é um grande banco de dados léxico, disponível em diversos idiomas. Substantivos, verbos, adjetivos e advérbios são agrupados em conjuntos de sinônimos cognitivos (<i>synsets</i>), one cada um expressa um conceito distinto. Os <i>synsets</i> são interligados por meio de relações conceitual-semânticas e léxicas.</b>

### Acessando o WordNet utilizando o NLTK
<p align='justify'>O NLTK ainda não dá suporte ao acesso direto a busca em algum grande WordNet em português (e.g., openWordnet-PT, WordNet.PT). Trabalharemos nossos exemplos em inglês e com uso da versão em português contida no <a href='http://compling.hss.ntu.edu.sg/omw/'>Open Multilingual Wordnet</a> que o NLTK dá suporte.</p>
"""

# Você deve importar o corpus do WordNet
import nltk
from nltk.corpus import wordnet
# Precisa efetuar o download do wordnet
nltk.download('wordnet')
# Caso use o Open Multilingual Wordnet
nltk.download('omw-1.4')

# Obtém o(s) synset(s) para a palavra "pain" (dor)
syn = wordnet.synsets("pain")
# Imprime a definição
print(syn[0].definition())
# Imprime exemplos de aplicação em uma frase
print(syn[0].examples())

"""

> **O que é um `synset`?** É um conjunto de sinônimos que compartilham um mesmo significado.

"""

# Temos uma lista de synset possíveis para a palavra pesquisada
syn

"""> Cada `synset` possui um ou mais `lemmas`, que representam um significado particular de uma palavra específica.

#### Utilizando `synsets` e `lemmas` em português através do Open Multilingual Wordnet
"""

# Busca synsets em português
wordnet.synsets("cão", lang="por")

# Busca lemmas em português
wordnet.lemmas("cão", lang="por")

"""#### Atividade prática - Construindo uma função de **sugestão de sinônimos**
Você já deve ter visto em aplicativos, como o Microsoft Word, a funcionalidade de sugerir sinônimos de uma palavra. Com o auxílio do WordNet conseguimos facilmente obter sinônimos de uma dada palavra.


---


![String-based similarity measures](https://docs.google.com/uc?export=download&id=1-VKDiXbIdSgwJzBvXjgdP47R-dPe--XG)
"""

# Define função para busca de sinonimos
def buscarSinonimos(palavra):
    # Obter os synsets (conjuntos de sinônimos) para a palavra
    synsets = wordnet.synsets(palavra)

    # Inicializar uma lista para armazenar os sinônimos encontrados
    sinonimos = []

    # Iterar sobre os synsets e adicionar os sinônimos à lista
    for synset in synsets:
        for lemma in synset.lemmas():
            sinonimos.append(lemma.name())

    # Remover duplicatas e imprimir os sinônimos encontrados
    sinonimos = list(set(sinonimos))
    print("Sinônimos de", palavra + ":")
    for sinonimo in sinonimos:
        print("-", sinonimo)

# A seguir pediremos que o usuário digite uma palavra
palavra = input("Digite uma palavra: ")

# Busca sinonimos da palavra
buscarSinonimos(palavra)

"""

> **ATIVIDADE EXTRA**: Agora faça uma função de busca por palavras opostas (antônimos).
DICA: além da função `name()` o objeto `lemma` tem também a função `.antonyms()`.

"""

# Define função para busca de antônimos
def buscarAntonimos(palavra):
    # Obter os synsets (conjuntos de sinônimos) para a palavra
    synsets = wordnet.synsets(palavra)

    # Inicializar uma lista para armazenar os antônimos encontrados
    antonimos = []

    # Iterar sobre os synsets e adicionar os antônimos à lista
    for synset in synsets:
        for lemma in synset.lemmas():
            for antonym in lemma.antonyms():
                antonimos.append(antonym.name())

    # Remover duplicatas e imprimir os antônimos encontrados
    antonimos = list(set(antonimos))
    print("Antônimos de", palavra + ":")
    if antonimos:
        for antonimo in antonimos:
            print("-", antonimo)
    else:
        print("Nenhum antônimo encontrado.")

# Pedir ao usuário para digitar uma palavra
palavra = input("Digite uma palavra: ")

# Buscar antônimos da palavra
buscarAntonimos(palavra)

"""### Acessando diferentes níveis hierárquicos
Além dos sinônimos e antônimos podemos acessar termos com diferentes relações hierarquicas entre si.

#### Hiponímias
Hiponímia é uma relação semântica entre palavras em que uma palavra é um tipo ou uma subclasse de outra palavra mais geral. Em outras palavras, um termo é considerado um hipônimo de outro se seu significado estiver contido no significado do outro termo, e se ambos os termos pertencerem à mesma categoria semântica, mas com diferentes níveis de especificidade.

Por exemplo, em uma relação hiponímica, "cachorro" é um hipônimo de "animal", pois um cachorro é um tipo específico de animal. Da mesma forma, "rosa" é um hipônimo de "flor", "cadeira" é um hipônimo de "móvel", e assim por diante.

A hiponímia é útil para entender a hierarquia de conceitos em um domínio específico e como os termos podem ser organizados em uma estrutura de árvore, com termos mais específicos (hipônimos) situados abaixo de termos mais gerais (hiperônimos). Essa relação é fundamental em campos como a linguística, a semântica computacional e a ontologia.
"""

fruta = wordnet.synsets("fruta", lang="por")[0]
fruta.hyponyms()

"""#### Hiperonímias
Hiperonímia é a relação semântica oposta à hiponímia. Enquanto a hiponímia descreve a relação entre termos mais específicos e seus termos mais gerais correspondentes, a hiperonímia descreve a relação entre termos mais gerais e seus termos mais específicos correspondentes.

Em outras palavras, um termo é considerado um hiperônimo de outro se seu significado for mais abrangente e englobar o significado do outro termo. Hiperônimos são termos que representam categorias mais amplas ou conjuntos maiores que incluem os termos específicos.

Por exemplo, em uma relação hiperonímica, "animal" é um hiperônimo de "cachorro", "gato" e "pássaro", pois "animal" é uma categoria mais ampla que engloba esses termos mais específicos. Da mesma forma, "móvel" é um hiperônimo de "cadeira", "mesa" e "sofá".

Assim como a hiponímia, a hiperonímia é importante para entender a organização hierárquica de conceitos em um domínio específico e é fundamental em áreas como a linguística, a semântica computacional e a ontologia.
"""

cidade = wordnet.synsets("cidade", lang="por")[0]
cidade.hypernyms()

"""É possível encontrar o hiperônimo mais próximo entre dois termos."""

bulldog = wordnet.synsets("bulldog")[0]
pug = wordnet.synsets("pug")[0]
bulldog.lowest_common_hypernyms(pug)

"""#### Meronímias
Meronímia é uma relação semântica que descreve a relação entre um termo que representa uma parte e um termo que representa o todo. Em outras palavras, um termo é considerado um merônimo de outro se ele denota uma parte, um componente ou um membro do outro termo.

Por exemplo, em uma relação meronímica, "roda" é um merônimo de "carro", pois "roda" é uma parte ou componente de um "carro". Da mesma forma, "dedo" é um merônimo de "mão", "pétala" é um merônimo de "flor" e "janela" é um merônimo de "casa".

Essa relação é frequentemente utilizada para descrever a estrutura hierárquica de objetos e conceitos, onde termos mais específicos (merônimos) estão relacionados a termos mais gerais (holônimos) por meio de uma relação de parte-todo. A meronímia é uma das formas de organização de conhecimento que é explorada em áreas como a linguística, a semântica computacional e a ontologia.
"""

mao = wordnet.synsets("mão", lang="por")[0]
mao.part_meronyms()

saliva = wordnet.synsets("saliva", lang="por")[0]
saliva.substance_meronyms()

"""#### Holonímias
Holonímia é a relação semântica oposta à meronímia. Enquanto a meronímia descreve a relação entre partes e o todo, a holonímia descreve a relação entre o todo e suas partes ou componentes.

Em outras palavras, um termo é considerado um holônimo de outro se ele denota um todo ou uma entidade que contém ou é composta das entidades denotadas pelo outro termo.

Por exemplo, em uma relação holonímica, "carro" é um holônimo de "roda", "motor" e "porta", pois um "carro" é composto de várias partes ou componentes. Da mesma forma, "flor" é um holônimo de "pétala", "caule" e "folha", pois uma "flor" consiste em várias partes.

Assim como a meronímia, a holonímia é importante para descrever a estrutura hierárquica de objetos e conceitos, e é explorada em áreas como a linguística, a semântica computacional e a ontologia.
"""

arvore = wordnet.synsets("árvore", lang="por")[0]
arvore.member_holonyms()

"""#### Polissemias

##### **Atividade prática** - Buscando polissemias
A polissemia é a quantidade de sentidos/significados de uma palavra.

Utilizando a interface do WordNet podemos determinar que o substantivo "cachorro" tem 7 diferentes significados ao utilizar o código: `len(wordnet.synsets('dog', 'n'))`

Calcule a média de polissemias entre os substantivos (n), verbos (v) e adjetivos (a).

> **DICA**: Você pode obter todos `synsets` substantivos usando `wordnet.all_synsets('n')`
"""

# Contagem de significados para substantivo "cachorro"
len(wordnet.synsets('dog', 'n'))

# Define função para calcular a media de polissemias entre substantivos, verbos e adjetivos
def calcular_media_poli():
    # Converter geradores em listas
    synsets_n = list(wordnet.all_synsets('n'))
    synsets_v = list(wordnet.all_synsets('v'))
    synsets_a = list(wordnet.all_synsets('a'))

    # Contagem total de significados para substantivos (n)
    total_n = len(synsets_n)

    # Contagem total de significados para verbos (v)
    total_v = len(synsets_v)

    # Contagem total de significados para adjetivos (a)
    total_a = len(synsets_a)

    # Calcular a média de polissemias para cada categoria
    media_n = total_n / len(synsets_n)
    media_v = total_v / len(synsets_v)
    media_a = total_a / len(synsets_a)

    return media_n, media_v, media_a

# Calcular a média de polissemia
media_n, media_v, media_a = calcular_media_poli()

# Imprimir os resultados
print("Média de polissemia para substantivos (n):", media_n)
print("Média de polissemia para verbos (v):", media_v)
print("Média de polissemia para adjetivos (a):", media_a)

"""### Calculando Similaridade semântica entre palavras
Algumas funções de similaridade *knowledge-based* já são implementadas pela interface do WordNet no NLTK.

![Knowledge-based similarity measures](https://docs.google.com/uc?export=download&id=1g-3cWh9BF6Ex8oWDv77L1mdagUq0yc0v)
"""

gato = wordnet.synsets("gato", lang="por")[0]
cachorro = wordnet.synsets("dog")[0]

chocar = wordnet.synsets("chocar", lang="por")[0]
colidir = wordnet.synsets("colidir", lang="por")[0]

caneta = wordnet.synsets("caneta", lang="por")[0]

gato

cachorro

"""> **IMPORTANTE**: Não importa o idioma que você busque, a referência será sempre aos mesmos `synsets`

#### **Path Similarity** (path)
Retorna uma pontuação indicando o quão semelhantes os sentidos de duas palavras são, com base no caminho mais curto que conecta os sentidos na taxonomia *is-a* (é-um) (Hiperonímia / Hiponímia). A pontuação está no intervalo de 0 a 1.
"""

cachorro.path_similarity(gato)

chocar.path_similarity(colidir)

gato.path_similarity(caneta)

"""#### **Leacock-Chodorow Similarity** (lch)
Similar ao anterior, porém utiliza também a profundidade máxima da taxonomia em que os sentidos ocorrem no cálculo.
"""

cachorro.lch_similarity(gato)

chocar.lch_similarity(colidir)

gato.lch_similarity(caneta)

"""#### **Wu-Palmer Similarity** (wup)
Retorna uma pontuação indicando o quão  semelhantes os sentidos de duas palavras são, com base na profundidade dos dois sentidos na taxonomia e no seu nó ancestral mais específico.
"""

cachorro.wup_similarity(gato)

chocar.wup_similarity(colidir)

gato.wup_similarity(caneta)

"""## Referências e Material complementar

*   [NLTK WordNet Interface](http://www.nltk.org/howto/wordnet.html)
*   [openWordnet-PT](https://github.com/own-pt/openWordnet-PT)
*   [WordNet.PT](http://wordnet.pt/)

Este notebook foi produzido por Prof. [Lucas Oliveira](http://lattes.cnpq.br/3611246009892500) e revisado por Carla Silveira.
"""